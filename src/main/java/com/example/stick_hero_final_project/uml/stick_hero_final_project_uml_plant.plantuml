@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class HelloController {
  + HelloController(): 
  + closebutton(): void
  # onHelloButtonClick(): void
  + onPlayButtonClick(ActionEvent): void
}
class Pillar {
  + Pillar(double, double, double, double): 
  - pillar: Rectangle
  + moveLeft(double): void
   pillar: Rectangle
}
class Player_create {
  + Player_create(double, double, double, double): 
   node: ImageView
}
class background {
  + background(): 
  - backgroundImages: List<String>
   backgroundImages: List<String>
}
interface cherries << interface >> {
  + revive_cherries(): void
  + set_cherries(): void
  + inc_cherries(): void
  + view_cherries(): void
}
class main {
  + main(): 
  + start(Stage): void
  + main(String[]): void
}
interface points << interface >> {
  + display(): void
  + set_score(): void
  + increment(): void
  + perfect_increment(): void
}
interface score_interface << interface >> {
  + viewscore(): void
  + setscore(): void
  + increase_score(): void
}
class stick {
  + stick(double, double, double, double): 
  - falling: boolean
  - length: double
  - width: double
  - stick: Rectangle
  + reset(): void
  + extend(double): void
   falling: boolean
   length: double
   width: double
   stick: Rectangle
}
class stick_hero {
  + stick_hero(): 
  + viewscore(): void
  + increment(): void
  + init(): void
  + setscore(): void
  + set_cherries(): void
  + initialize1(Pane): void
  - onMouseDragged(MouseEvent): void
  + increase_score(): void
  + perfect_increment(): void
  # onHelloButtonClick(): void
  + display(): void
  + set_score(): void
  + cr_pl_get_nd(): Node
  + cr_pl(): Player_create
  + revive_cherries(): void
  + inc_cherries(): void
  + view_cherries(): void
   randomImage: String
}

stick_hero       -[#000082,plain]-^  background      
stick_hero       -[#008200,dashed]-^  cherries        
stick_hero       -[#008200,dashed]-^  points          
stick_hero       -[#008200,dashed]-^  score_interface 
@enduml
